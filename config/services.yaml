# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
    admin.status:
        class: App\Admin\StatusAdmin
        arguments: [~, App\Entity\Status, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: 'Sorties', label: Status }


    admin.cities:
        class: App\Admin\CitiesAdmin
        arguments: [~, App\Entity\Cities, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: 'Sorties', label: Cities }

    admin.participants:
        class: App\Admin\ParticipantsAdmin
        arguments: [~, App\Entity\Participants, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: 'Utilisateurs',label: Participants }

    admin.places:
        class: App\Admin\PlacesAdmin
        arguments: [~, App\Entity\Places, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: 'Sorties', label: Places }

    admin.registrations:
        class: App\Admin\RegistrationsAdmin
        arguments: [~, App\Entity\Registrations, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: 'Sorties',label: Registrations }

    admin.sites:
        class: App\Admin\SitesAdmin
        arguments: [~, App\Entity\Sites, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: 'Utilisateurs', label: Sites }

    admin.trips:
        class: App\Admin\TripsAdmin
        arguments: [~, App\Entity\Trips, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: 'Sorties',label: Trips }

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
